
class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      currentVal: '0',
      evaluated: false,
    }
    this.handleNumber = this.handleNumber.bind(this);
    this.handleOperator = this.handleOperator.bind(this);
    this.handleInitialize = this.handleInitialize.bind(this);
    this.handleDecimal = this.handleDecimal.bind(this);
    this.handleEvaluate = this.handleEvaluate.bind(this);
  }

  handleInitialize() {
    this.setState({
      currentVal: '0',
      evaluated: false
    });
  }
  handleNumber(e) {
    let tmp = e.target.value;
    if(this.state.currentVal == '0')   
      this.setState({ 
      currentVal: e.target.value
      });
    else if(this.state.evaluated == false) {
      if(/[\d\+\-\/×]$/.test(this.state.currentVal) || /\d+\.$/.test(this.state.currentVal)) {
        this.setState(state => ({
          currentVal: state.currentVal + tmp
        }));
      }
    }

}  
  handleOperator(e) {
    let tmp = e.target.value;
    let tmpVal = this.state.currentVal;
    if(/\d+$/.test(tmpVal)) {
      this.setState(state => ({
        currentVal: state.currentVal + tmp
      }));
    } else if(tmp != '-') {
      while(/[\+\-\/×]$/.test(tmpVal)) tmpVal = tmpVal.slice(0, -1);
      this.setState({
        currentVal: tmpVal+tmp
      });
    } else {
      this.setState({
        currentVal: tmpVal+tmp
      });
    }
  }
  handleDecimal(e) {
    let tmp = e.target.value; 
    if(/[\+\-×\/]\d+$/.test(this.state.currentVal) || /^\d+$/.test(this.state.currentVal))
      this.setState(state => ({
        currentVal: state.currentVal + tmp
      }));
    
  }
  handleEvaluate() {
    let tmp = Number(eval(this.state.currentVal.replace('×', '*')));
    tmp = Math.round(tmp*100000000000000)/100000000000000;
    this.setState(state => ({
      currentVal: tmp+''
    }));
  }
  
  render() {
    return (<div>
      <div className="calculator">
        <Output currentValue= {this.state.currentVal}/>
        <Buttons 
          initialize={this.handleInitialize}
          operators={this.handleOperator}
          numbers={this.handleNumber}
          decimal={this.handleDecimal}
          evaluate={this.handleEvaluate}
          />
      </div>
      </div>
      );
  }
}
class Buttons extends React.Component {
  render() {
    return (
      <div>
        <button
          className="jumbo"
          id="clear"
          onClick={this.props.initialize}
          value="AC"
        >
         AC
        </button>
        <button
          id="divide"
          onClick={this.props.operators}
          value="/"
        >
         /
        </button>
         <button
          id="multiply"
          onClick={this.props.operators}
          value="×"
        >
         x
        </button>
        <button
          id="seven"
          onClick={this.props.numbers}
          value="7"
        >
         7
        </button>
        <button
          id="eight"
          onClick={this.props.numbers}
          value="8"
        >
         8
        </button>
        <button
          id="nine"
          onClick={this.props.numbers}
          value="9"
        >
         9
        </button>
        <button
          id="subtract"
          onClick={this.props.operators}
          value="-"
        >
         -
        </button>
        <button
          id="four"
          onClick={this.props.numbers}
          value="4"
        >
         4
        </button>
        <button
          id="five"
          onClick={this.props.numbers}
          value="5"
        >
         5
        </button>
        <button
          id="six"
          onClick={this.props.numbers}
          value="6"
        >
         6
        </button>
        <button
          id="add"
          onClick={this.props.operators}
          value="+"
        >
         +
        </button>
        <button
          id="one"
          onClick={this.props.numbers}
          value="1"
        >
         1
        </button>
        <button
          id="two"
          onClick={this.props.numbers}
          value="2"
        >
         2
        </button>
        <button
          id="three"
          onClick={this.props.numbers}
          value="3"
        >
         3
        </button>
        <button
          className="jumbo"
          id="zero"
          onClick={this.props.numbers}
          value="0"
        >
         0
        </button>
        <button id="decimal" onClick={this.props.decimal} value=".">
          .
        </button>
        <button
          id="equals"
          onClick={this.props.evaluate}
          value="="
        >
         =
        </button>
      </div>
    );
  }
}

class Output extends React.Component {
  render() {
    return (
      <div className="outputScreen" id="display">
        {this.props.currentValue}
        </div>
    );
  }  
}
  
ReactDOM.render(<Calculator />, document.getElementById('app')); 